{"version":3,"sources":["components/Header.jsx","components/Footer.jsx","components/Search.jsx","components/Banner.jsx","components/CardList.jsx","components/Card.jsx","components/Graph.jsx","App.js","index.js"],"names":["Header","Footer","year","Date","getFullYear","href","SearchBar","props","useState","countryArray","setCountryArray","useEffect","fetch","then","results","json","data","countries","map","country","name","prevValues","className","onChange","event","select","target","value","index","id","Banner","strCountry","substr","toUpperCase","CardList","container","amount","date","Card","dataArray","setDataArray","updateDate","setUpdateDate","location","conData","confirmed","recData","recovered","detData","deaths","update","lastUpdate","currentDate","toDateString","item","Graph","dailyDataArray","setDailyDataArray","countryDataArray","setCountryDataArray","Confirmed","Recovered","Deaths","reportDate","infected","lineChart","labels","toLocaleDateString","datasets","total","label","borderColor","fill","backgroundColor","barChart","options","legend","display","App","selectedCountry","setselectedCountry","Search","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.841602dd.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Header() {\r\n    return (\r\n        <header>\r\n            <h1>Covid19 Tracker </h1>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nfunction Footer() {\r\n    var year = new Date().getFullYear();\r\n\r\n    return (\r\n        <footer>\r\n            <p>Copyright Varun Sachdeva {year}</p>\r\n            <a href=\"https://covid19.mathdro.id/api\">Data API</a>\r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default Footer;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nfunction SearchBar(props) {\r\n    const [countryArray, setCountryArray] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetch(\"https://covid19.mathdro.id/api/countries\")\r\n            .then((results) => results.json())\r\n            .then((data) => {\r\n                setCountryArray(data.countries.map((country) => country.name));\r\n                setCountryArray((prevValues) => [\"Global\", ...prevValues]);\r\n            });\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"searchBar\">\r\n            <select onChange={(event) => props.select(event.target.value)}>\r\n                {countryArray.map((country, index) => {\r\n                    return (\r\n                        <option key={index} value={country} id={index}>\r\n                            {country}\r\n                        </option>\r\n                    );\r\n                })}\r\n            </select>\r\n        </div>\r\n    );\r\n}\r\nexport default SearchBar;\r\n","import React from \"react\";\r\n\r\nfunction Banner(props) {\r\n    var strCountry = \"\";\r\n    props.country ? (strCountry = props.country.substr(10)) : (strCountry = \"Global\");\r\n\r\n    return (\r\n        <div className=\"banner\">\r\n            <h1>{strCountry.toUpperCase()}</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Banner;\r\n","import React from \"react\";\r\n\r\nfunction CardList(props) {\r\n    return (\r\n        <div>\r\n            <div className=\"cardList\">\r\n                <h3>{props.container.name}</h3>\r\n                <h4>{props.container.amount}</h4>\r\n                <p>Last Updated</p>\r\n                <p>{props.date}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport CardList from \"./CardList\";\r\n\r\nfunction Card(props) {\r\n    const [dataArray, setDataArray] = useState([]);\r\n    const [updateDate, setUpdateDate] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        fetch(\"https://covid19.mathdro.id/api/\" + props.location)\r\n            .then((results) => results.json())\r\n            .then((data) => {\r\n                const {\r\n                    confirmed: { value: conData },\r\n                    recovered: { value: recData },\r\n                    deaths: { value: detData },\r\n                    lastUpdate: update,\r\n                } = data;\r\n\r\n                setDataArray([\r\n                    { name: \"INFECTED\", amount: conData },\r\n                    { name: \"RECOVERED\", amount: recData },\r\n                    { name: \"DEATHS\", amount: detData },\r\n                ]);\r\n                const currentDate = new Date(update);\r\n                setUpdateDate(currentDate.toDateString());\r\n            });\r\n    }, [props.location]);\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"cardArray\">\r\n                {dataArray.map((item, index) => (\r\n                    <CardList key={index} id={index} container={item} date={updateDate} />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\n\r\nfunction Graph(props) {\r\n    const [dailyDataArray, setDailyDataArray] = useState([]);\r\n    const [countryDataArray, setCountryDataArray] = useState([]);\r\n    useEffect(() => {\r\n        fetch(\"https://covid19.mathdro.id/api/daily\")\r\n            .then((results) => results.json())\r\n            .then((data) => {\r\n                setDailyDataArray(\r\n                    data.map(({ confirmed, recovered, deaths, reportDate: date }) => ({\r\n                        Confirmed: confirmed,\r\n                        Recovered: recovered,\r\n                        Deaths: deaths,\r\n                        updateDate: date,\r\n                    }))\r\n                );\r\n            });\r\n\r\n        fetch(\"https://covid19.mathdro.id/api/\" + props.country)\r\n            .then((results) => results.json())\r\n            .then((data) => {\r\n                const {\r\n                    confirmed: { value: conData },\r\n                    recovered: { value: recData },\r\n                    deaths: { value: detData },\r\n                    lastUpdate: update,\r\n                } = data;\r\n\r\n                setCountryDataArray([conData, recData, detData, update]);\r\n            });\r\n    }, [props.country]);\r\n\r\n    const [infected, recovered, deaths] = countryDataArray;\r\n\r\n    const lineChart = dailyDataArray[0] ? (\r\n        <Line\r\n            data={{\r\n                labels: dailyDataArray.map(({ updateDate }) => new Date(updateDate).toLocaleDateString()),\r\n                datasets: [\r\n                    {\r\n                        data: dailyDataArray.map((data) => data.Confirmed.total),\r\n                        label: \"Infected\",\r\n                        borderColor: \"#3333ff\",\r\n                        fill: true,\r\n                    },\r\n                    {\r\n                        data: dailyDataArray.map((data) => data.Deaths.total),\r\n                        label: \"Deaths\",\r\n                        borderColor: \"red\",\r\n                        backgroundColor: \"rgba(255, 0, 0, 0.5)\",\r\n                        fill: true,\r\n                    },\r\n                ],\r\n            }}\r\n        />\r\n    ) : null;\r\n\r\n    const barChart = infected ? (\r\n        <Bar\r\n            data={{\r\n                labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n                datasets: [\r\n                    {\r\n                        label: \"People\",\r\n                        backgroundColor: [\"rgba(0, 0, 255, 0.5)\", \"rgba(0, 255, 0, 0.5)\", \"rgba(255, 0, 0, 0.5)\"],\r\n                        data: [infected, recovered, deaths],\r\n                    },\r\n                ],\r\n            }}\r\n            options={{\r\n                legend: { display: false },\r\n            }}\r\n        />\r\n    ) : null;\r\n\r\n    return (\r\n        <div className=\"graph\">\r\n            <div className=\"plot\">{props.country ? barChart : lineChart}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Graph;\r\n","import React, { useState } from \"react\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport SearchBar from \"./components/Search\";\nimport Banner from \"./components/Banner\";\nimport Card from \"./components/Card\";\nimport Graph from \"./components/Graph\";\nimport \"./styling/styles.css\";\n\nfunction App() {\n  const [selectedCountry, setselectedCountry] = useState(\"\");\n\n  const handleCountryChange = country => {\n    if (country === \"Global\") {\n      setselectedCountry(\"\");\n    } else {\n      setselectedCountry(\"countries/\" + country);\n    }\n  };\n\n  return (\n    <div>\n      <Header />\n      <Banner country={selectedCountry} />\n      <SearchBar select={handleCountryChange} />\n      <Card location={selectedCountry} />\n      <Graph country={selectedCountry} />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}